<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="chkCarShowCarNav,Help" xml:space="preserve">
    <value>Show the navigation controld for the carousel</value>
  </data>
  <data name="chkCarShowCarNav.Text" xml:space="preserve">
    <value>Show navigation controls</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>DnnC_BootstrapHelpers Settings</value>
  </data>
  <data name="lblHelperType.Help" xml:space="preserve">
    <value>Choose the type of function you would like to use</value>
  </data>
  <data name="lblHelperType.Text" xml:space="preserve">
    <value>Bootstrap function type</value>
  </data>
  <data name="lblInterval.Help" xml:space="preserve">
    <value>The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.</value>
  </data>
  <data name="lblInterval.Text" xml:space="preserve">
    <value>Slide interval</value>
  </data>
  <data name="lblShowCarCaptions.Help" xml:space="preserve">
    <value>Show captions for each slide</value>
  </data>
  <data name="lblShowCarCaptions.Text" xml:space="preserve">
    <value>Show captions</value>
  </data>
  <data name="lblTabFade.Help" xml:space="preserve">
    <value>Makes tabs fade in when you change the tab</value>
  </data>
  <data name="lblTabFade.Text" xml:space="preserve">
    <value>Use tab fade effect</value>
  </data>
  <data name="lblTabType.Help" xml:space="preserve">
    <value>Choose between a normal tab or a pill tab</value>
  </data>
  <data name="lblTabType.Text" xml:space="preserve">
    <value>Tab type</value>
  </data>
  <data name="optButtonGroup.Text" xml:space="preserve">
    <value>Button group</value>
  </data>
  <data name="optCarousel.Text" xml:space="preserve">
    <value>Carousel</value>
  </data>
  <data name="optChoose.Text" xml:space="preserve">
    <value>Choose....</value>
  </data>
  <data name="optColapse.Text" xml:space="preserve">
    <value>Accordion</value>
  </data>
  <data name="optModel.Text" xml:space="preserve">
    <value>Model</value>
  </data>
  <data name="optPill.Text" xml:space="preserve">
    <value>Pills</value>
  </data>
  <data name="optTab.Text" xml:space="preserve">
    <value>Tabs</value>
  </data>
  <data name="optTable.Text" xml:space="preserve">
    <value>Table</value>
  </data>
  <data name="optTabs.Text" xml:space="preserve">
    <value>Tabs</value>
  </data>
  <data name="lblCarInterval.Help" xml:space="preserve">
    <value>The amount of time to delay between automatically cycling an item. If false, carousel will not automatically cycle.</value>
  </data>
  <data name="lblCarInterval.Text" xml:space="preserve">
    <value>Slider interval</value>
  </data>
  <data name="lblCarInterval.Text1" xml:space="preserve">
    <value>Delay time</value>
  </data>
  <data name="lblShowCarNavs.Help" xml:space="preserve">
    <value>Show a navigation of the sliders</value>
  </data>
  <data name="lblShowCarNavs.Text" xml:space="preserve">
    <value>Show navigation</value>
  </data>
  <data name="lblCarStretch.Help" xml:space="preserve">
    <value>Stretch image to fit the with of the slider panel</value>
  </data>
  <data name="lblCarStretch.Text" xml:space="preserve">
    <value>Stretch image to fit</value>
  </data>
  <data name="lblbtnJustify.Help" xml:space="preserve">
    <value>Make a group of buttons stretch at equal sizes to span the entire width of its parent</value>
  </data>
  <data name="lblbtnJustify.Text" xml:space="preserve">
    <value>Justify the buttons</value>
  </data>
  <data name="lblbtnJustifyNote.Text" xml:space="preserve">
    <value>* Justify will only work on horizontal button group layout</value>
  </data>
  <data name="lblBtnSize.Help" xml:space="preserve">
    <value>The size of the button</value>
  </data>
  <data name="lblBtnSize.Text" xml:space="preserve">
    <value>Button size</value>
  </data>
  <data name="lblBtnStyle.Help" xml:space="preserve">
    <value>Style the button group to the style you wish</value>
  </data>
  <data name="lblBtnStyle.Text" xml:space="preserve">
    <value>Button style</value>
  </data>
  <data name="lblBtnVerticle.Help" xml:space="preserve">
    <value>Make a set of buttons appear vertically stacked rather than horizontally</value>
  </data>
  <data name="lblBtnVerticle.Text" xml:space="preserve">
    <value>Vertically align</value>
  </data>
  <data name="optbtnSizeLg.Text" xml:space="preserve">
    <value>Large</value>
  </data>
  <data name="optbtnSizeSm.Text" xml:space="preserve">
    <value>Small</value>
  </data>
  <data name="optbtnSizeStd.Text" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="optbtnSizeXs.Text" xml:space="preserve">
    <value>Extra small</value>
  </data>
  <data name="optbtnStyleBlue.Text" xml:space="preserve">
    <value>Blue (Primary)</value>
  </data>
  <data name="optbtnStyleGreen.Text" xml:space="preserve">
    <value>Green (Success)</value>
  </data>
  <data name="optbtnStyleLBlue.Text" xml:space="preserve">
    <value>Light blue (Info)</value>
  </data>
  <data name="optbtnStyleOrange.Text" xml:space="preserve">
    <value>Orange (Warning)</value>
  </data>
  <data name="optbtnStyleRed.Text" xml:space="preserve">
    <value>Red (Danger)</value>
  </data>
  <data name="optbtnStyleStd.Text" xml:space="preserve">
    <value>Standard (Default)</value>
  </data>
  <data name="optFlipper.Text" xml:space="preserve">
    <value>Flipper</value>
  </data>
</root>